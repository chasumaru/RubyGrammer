


### ビット演算子
# https://www.javadrive.jp/ruby/num/index6.html

# ビットAND ..両方のビットが1である場合に1とする
num1 = 11 #=> 1011
num2 = 14 #=> 1110
puts (num1 & num2) #=> 1010

# ビットOR ...どちらかのビットが1である場合に1とする
num1 = 10 #=> 1010
num2 = 12 #=> 1100
puts (num1 | num2) #=> 1110

# ビットXOR ...両方のビットが異なる場合に1とする
num1 = 10 #=> 1010
num2 = 12 #=> 1100
puts (num1 ^ num2) #=> 0110

# ビットNOT(反転) ...右辺の各ビットが1の場合は0, 0の場合は1とする
num = 10 #=> 0000000000001010
puts ~num #=> 1111111111110101 #=> -11


## シフト演算子 ...符号は変わらない(※1)

# a << b ...左シフト (a * 2^b)。 左シフトして空いた右端には0が格納される。
num1 = 11
num2 = 1
print(num1 << num2) #=> 22

# a >> b ...右シフト (a * (1/2)^b)。※1: 右シフトして空いた左端にシフト前の数値を格納する。
num1 = 11
num2 = 1
print(num1 >> num2) #=> 5



### 算術演算子

# self ** other ...べき乗
#= pow(other)

# pow(other, modulo)


## 整数問題

# gcd(n) ...selfとnの最大公約数を取得
3.gcd(7) #=> 1
8.gcd(4) #=> 4
3.gcd(0) #=> 3
# lcm(n) ...selfとnの最小公倍数を取得



# オブジェクトの変換

# to_f ...小数第一位に(.0)を追加



# その他

# digits ...桁ごとの数字の配列を取得
123.digits #=> [3, 2, 1]

# digits(num) ...指定した基数で表記
17.digits(16) #=> [1, 1]


# chr ...エンコード文字列の取得
65.chr #=> "A"
12354.chr #=> `chr': 12354 out of char range (RangeError)
12354.chr(Encoding::UTF_8) # => "あ"

